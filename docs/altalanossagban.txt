A genetikus algoritmusokat olyan diszkrét optimalizálási problémák megoldására alkalmazzuk,
amelyekre nem létezik általános eljárás, a probléma specifikussága, egyedisége következtében.
Túl sok az ismeretlen és a közöttük levő összefüggések is ismeretlenek, így a rendszernek 
"tanulnia kell" a probléma megoldása során, vagyis mesterséges intelligenciát kell 
használnunk. A genetikus algoritmus épp megfelel. Ahogyan az evolúció is lassú folyamat volt,
úgy az evolúciót modellező genetikus algoritmusok is lassúak, ahhoz képest hogy áramkörökről
beszélhetünk a háttérben, de nyilván nagyságrendekkel hamarabb kapunk eredményt, mintha emberi
intelligenciával dolgoznánk és amennyiben van megoldás, akkor azt egy megfelelően elkészített
genetikus algoritmus biztosan megtalálja. Mivel megelőzően nem lehetünk biztosak benne, hogy
egészen megfelelő paramétereket választottunk, az algoritmus többszöri lefuttatásával 
szerezhetünk bizonyosságot a megoldás optimális értékeit illetően. Ezenkívül van rá lehetőség,
hogy az algoritmus párhuzamosításával növeljük a gyorsaságot és csökkentsük a program méretét,
ezáltal a memóriaigényt.
Ahogyan az evolúció törvényei következtében kitermelődtek az egyes fajok optimális 
tulajdonságokkal rendelkező egyedekből álló populációi, a túlélés érdekében, úgy termeljük ki
egy adathalmaz optimális értékekkel rendelkező tagjait az evolúció mozzanatait (szelekció,
öröklődés, mutáció) a maga módján leutánzó genetikus algoritmussal, az adott probléma 
megoldása érdekében. Ahogyan más területeken, úgy itt is leképezzük a valós világot a
programozás nyelvére, nézzük az analógiákat általánosságban:
-populáció->adathalmaz
-egyed->adathalmaz egy tagja
-gén->adathalmaz egy tagjának egy attribútuma
-túléléshez szükséges tulajdonságok->adathalmaz tagjainak attribútumai
-ezen tulajdonságok kedvező mivolta->az attribútumok optimális értéke
A szelekció, öröklődés és mutáció függvények segítségével valósul meg, de ezekkel
kapcsolatban többféle lehetőség létezik és az adott problémánk ismeretében választjuk ki,
hogy milyen fajta szelekciós, öröklődési, illetve mutációs eljárást alkalmazunk. Ezekre nem
térek ki, csak az én munkám során használt eljárásokat fogom bemutatni.
A genetikus algoritmus esetleges sikertelenségét a lokális optimumok problematikája okozza. 
Azt képzeljük el, hogy egy hegyvidék legalacsonyabb völgyét kell megtalálnunk, de miután a
genetikus algoritmus talál egy völgyet (vagyis egy lokális minimumot), nem tudja megmondani,
hogy a legmélyebbet (vagyis egyben a globális optimumot) találta-e meg. A programozó feladata
annak elérése, hogy a rendszer ne gondolja azt tévesen, a globális optimumot találta meg. 
Máskülönben megreked az algoritmus, amely nem szeretne a völgyből megindulni felfelé, hiszen 
ekkor távolodunk az optimális megoldástól. Csakhogy ez az optimális megoldás könnyen lehet,
hogy csak lokális optimum, ami nekünk nem elég. Ahhoz, hogy a globális optimumot megtaláljuk,
átmenetileg el kell távolodnunk a már viszonylag jó megoldástól. Nézzük, miként tudjuk
módosítani a paramétereket a lokális minimumon való megrekedés elkerülése érdekében:
-nagyobb populációval, amennyiben lehetséges (jelen munka során nem lesz az, mivel adott
 számú időablakban lehetnek tanórák)
-a keresztezések és mutációk valószínűségének növelésével
-generációnként kevesebb egyed kiszelektálásával
-de az is előfordulhat, hogy nem megfelelően modelleztük le a problémát
Ezenkívül egyes problémák esetén lehetséges és érdemes több, egymással kapcsolatban álló
populációt létrehozni.